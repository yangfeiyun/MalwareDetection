# This file is modified based on sample code from Joshua Saxe
import os
import sys
import pickle
import argparse
import re
import numpy
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction import FeatureHasher

def get_string_features(path, hasher):
    # extract strings from binary file using regular expressions
    chars = r" -~"
    min_length = 5
    string_regexp = '[%s]{%d,}' % (chars, min_length)
    file_object = open(path, encoding="latin-1")
    data = file_object.read()
    pattern = re.compile(string_regexp)
    strings = pattern.findall(data)

    # store string features in dictionary form
    string_features = {}
    for string in strings:
        string_features[string] = 1

    # hash the features using the hashing trick
    hashed_features = hasher.transform([string_features])

    # do some data munging to get the feature array
    hashed_features = hashed_features.todense()
    hashed_features = numpy.asarray(hashed_features)
    hashed_features = hashed_features[0]

    # return hashed string features
    print("Extracted {0} strings from {1}".format(len(string_features), path))
    return hashed_features

def scan_file_RF(path):
    # scan a file to determine if it is malicious or benign
    if not os.path.exists("saved_RFdetector.pkl"):
        print("It appears you haven't trained a random forest detector yet!  Do this before scanning files.")
        sys.exit(1)
    with open("saved_RFdetector.pkl", "rb") as saved_detector:
        classifier, hasher = pickle.load(saved_detector)
    features = get_string_features(path, hasher)
    result_proba = classifier.predict_proba([features])[:,1]
    # if the user specifies malware_paths and benignware_paths, train a detector
    if result_proba > 0.5:
        print("It appears this file is malicious!", result_proba)
    else:
        print("It appears this file is benign.", result_proba)

def scan_file_LR(path):
    # scan a file to determine if it is malicious or benign
    if not os.path.exists("saved_LRdetector.pkl"):
        print("It appears you haven't trained a logistic regression detector yet!  Do this before scanning files.")
        sys.exit(1)
    with open("saved_LRdetector.pkl", "rb") as saved_detector:
        classifier, hasher = pickle.load(saved_detector)
    features = get_string_features(path, hasher)
    result_proba = classifier.predict_proba([features])[:,1]
    # if the user specifies malware_paths and benignware_paths, train a detector
    if result_proba > 0.5:
        print("It appears this file is malicious!", result_proba)
    else:
        print("It appears this file is benign.", result_proba)

def train_RFdetector(benign_path, malicious_path, hasher):
    # train the detector on the specified training data
    malicious_paths = get_training_paths(malicious_path)
    benign_paths = get_training_paths(benign_path)
    X = [get_string_features(path, hasher) for path in malicious_paths + benign_paths]
    y = [1 for i in range(len(malicious_paths))] + [0 for i in range(len(benign_paths))]
    classifier = RandomForestClassifier(64)
    classifier.fit(X, y)
    pickle.dump((classifier, hasher), open("saved_RFdetector.pkl", "wb"))

def train_LRdetector(benign_path, malicious_path, hasher):
    # train the detector on the specified training data
    malicious_paths = get_training_paths(malicious_path)
    benign_paths = get_training_paths(benign_path)
    X = [get_string_features(path, hasher) for path in malicious_paths + benign_paths]
    y = [1 for i in range(len(malicious_paths))] + [0 for i in range(len(benign_paths))]
    classifier = LogisticRegression()
    classifier.fit(X, y)
    pickle.dump((classifier, hasher), open("saved_LRdetector.pkl", "wb"))

def RF_evaluate(X, y, hasher):
    # use cross-validation to evaluate our model
    import random
    from sklearn import metrics
    from matplotlib import pyplot
    from sklearn.model_selection import KFold
    X, y = numpy.array(X), numpy.array(y)
    fold_counter = 0
    fold = KFold(3, shuffle=True)
    for train_index, test_index in fold.split(X):
        training_X, test_X = X[train_index], X[test_index]
        training_y, test_y = y[train_index], y[test_index]
        classifier = RandomForestClassifier(64)
        classifier.fit(training_X, training_y)
        scores = classifier.predict_proba(test_X)[:,-1]
        fpr, tpr, thresholds = metrics.roc_curve(test_y, scores)
        pyplot.semilogx(fpr, tpr, label="Fold number {0}".format(fold_counter))
        # pyplot.semilogx(fpr, tpr, label="ROC curve".format(fold_counter))
        fold_counter += 1
        # break
    pyplot.xlabel("detector false positive rate")
    pyplot.ylabel("detector true positive rate")
    # pyplot.title("Detector ROC curve")
    pyplot.title("detector cross-validation ROC curves")
    pyplot.legend()
    pyplot.grid()
    pyplot.show()

def LR_evaluate(X, y, hasher):
    # use cross-validation to evaluate our model
    import random
    from sklearn import metrics
    from matplotlib import pyplot
    from sklearn.model_selection import KFold
    X, y = numpy.array(X), numpy.array(y)
    fold_counter = 0
    fold = KFold(3, shuffle=True)
    for train_index, test_index in fold.split(X):
        training_X, test_X = X[train_index], X[test_index]
        training_y, test_y = y[train_index], y[test_index]
        classifier = LogisticRegression()
        classifier.fit(training_X, training_y)
        scores = classifier.predict_proba(test_X)[:,-1]
        fpr, tpr, thresholds = metrics.roc_curve(test_y, scores)
        pyplot.semilogx(fpr, tpr, label="Fold number {0}".format(fold_counter))
        # pyplot.semilogx(fpr, tpr, label="ROC curve".format(fold_counter))
        fold_counter += 1
        # break
    pyplot.xlabel("detector false positive rate")
    pyplot.ylabel("detector true positive rate")
    # pyplot.title("Detector ROC curve")
    pyplot.title("detector cross-validation ROC curves")
    pyplot.legend()
    pyplot.grid()
    pyplot.show()

def get_training_paths(directory):
    targets = []
    for path in os.listdir(directory):
        targets.append(os.path.join(directory,path))
    return targets

def get_training_data(benign_path, malicious_path, hasher):
    malicious_paths = get_training_paths(malicious_path)
    benign_paths = get_training_paths(benign_path)
    X = [get_string_features(path, hasher) for path in malicious_paths + benign_paths]
    y = [1 for i in range(len(malicious_paths))] + [0 for i in range(len(benign_paths))]
    return X, y

parser = argparse.ArgumentParser("get windows object vectors for files")
parser.add_argument("--malware_paths", default=None, help="Path to malware training files")
parser.add_argument("--benignware_paths", default=None, help="Path to benignware training files")
parser.add_argument("--scan_file_RF", default=None, help="File to scan")
parser.add_argument("--scan_file_LR", default=None, help="File to scan")
parser.add_argument("--RF_evaluate", default=False, action="store_true", help="cross-validation RF")
parser.add_argument("--train_RFdetector", default=False, action="store_true", help="train RF detector")
parser.add_argument("--LR_evaluate", default=False, action="store_true", help="cross-validation LR")
parser.add_argument("--train_LRdetector", default=False, action="store_true", help="train LR detector")

args = parser.parse_args()

hasher = FeatureHasher(20000)
if args.malware_paths and args.benignware_paths and args.train_RFdetector:
    train_RFdetector(args.benignware_paths, args.malware_paths, hasher)
elif args.malware_paths and args.benignware_paths and args.train_LRdetector:
    train_LRdetector(args.benignware_paths, args.malware_paths, hasher)
elif args.scan_file_RF:
    scan_file_RF(args.scan_file_RF)
elif args.scan_file_LR:
    scan_file_LR(args.scan_file_LR)
elif args.malware_paths and args.benignware_paths and args.RF_evaluate:
    X, y = get_training_data(args.benignware_paths, args.malware_paths, hasher)
    RF_evaluate(X, y, hasher)
elif args.malware_paths and args.benignware_paths and args.LR_evaluate:
    X, y = get_training_data(args.benignware_paths, args.malware_paths, hasher)
    LR_evaluate(X, y, hasher)
else:
    print("[*] You did not specify a path to scan," \
        " nor did you specify paths to malicious and benign training files" \
        " please specify one of these to use the detector.\n")
    parser.print_help()
