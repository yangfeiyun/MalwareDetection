# This file is modified based on sample code from Joshua Saxe
from keras.models import load_model
import numpy as np
import mmh3
import re
import os
from model_architecture import my_model


def read_file(sha, dir):
    with open(os.path.join(dir, sha), 'r', encoding="latin-1") as fp:
        file = fp.read()
    return file


def extract_features(sha, path_to_files_dir,
                     hash_dim=1024, split_regex=r"\s+"):
    # Read the file as a big string
    file = read_file(sha=sha, dir=path_to_files_dir)
    # Split the big string into a bunch of different tokens ("words")
    tokens = re.split(pattern=split_regex, string=file)
    # Take the module (hash of each token) so that each token is replaced
    # by bucket (category) from 1:hash_dim
    token_hash_buckets = [
        (mmh3.hash(w) % (hash_dim - 1) + 1) for w in tokens
    ]
    # Count how many hits each bucket got, so that the features always
    # have length hash_dim, regardless of the size of the HTML file
    token_bucket_counts = np.zeros(hash_dim)
    # This returns the frequency counts for each unique value in token_hash_buckets
    buckets, counts = np.unique(token_hash_buckets, return_counts=True)
    # Insert these counts into token_bucket_counts object
    for bucket, count in zip(buckets, counts):
        token_bucket_counts[bucket] = count
    return np.array(token_bucket_counts)


def my_generator(benign_files, malicious_files,
                 path_to_benign_files, path_to_malicious_files,
                 batch_size, features_length=1024):
    n_samples_per_class = batch_size // 2
    assert len(benign_files) >= n_samples_per_class
    assert len(malicious_files) >= n_samples_per_class
    while True:
        # Extract features for some random benign files
        ben_features = [
            extract_features(sha, path_to_files_dir=path_to_benign_files,
                             hash_dim=features_length)
            for sha in np.random.choice(benign_files, n_samples_per_class,
                                        replace=False)
        ]
        # Same for some malicious files
        mal_features = [
            extract_features(sha, path_to_files_dir=path_to_malicious_files,
                             hash_dim=features_length)
            for sha in np.random.choice(malicious_files, n_samples_per_class,
                                        replace=False)
        ]
        # Concatenate these together to get the features and labels array
        all_features = ben_features + mal_features
        # "0" represents "benign", and "1" represents "malware"
        labels = [0 for i in range(n_samples_per_class)] + [1 for i in range(
            n_samples_per_class)]

        # Shuffle the labels and features so that the ordering
        # is not always benign then malware
        idx = np.random.choice(range(batch_size), batch_size)
        all_features = np.array([np.array(all_features[i]) for i in idx])
        labels = np.array([labels[i] for i in idx])
        yield all_features, labels


def make_training_data_generator(features_length, batch_size):
    path_to_training_benign_files = 'data/html/benign/training/'
    path_to_training_malicious_files = 'data/html/malicious/training/'

    train_benign_files = os.listdir(path_to_training_benign_files)
    train_malicious_files = os.listdir(path_to_training_malicious_files)

    training_generator = my_generator(
        benign_files=train_benign_files,
        malicious_files=train_malicious_files,
        path_to_benign_files=path_to_training_benign_files,
        path_to_malicious_files=path_to_training_malicious_files,
        batch_size=batch_size,
        features_length=features_length
    )
    return training_generator


def get_validation_data(features_length, n_validation_files):
    path_to_validation_benign_files = 'data/html/benign/validation/'
    path_to_validation_malicious_files = 'data/html/malicious/validation/'
    # Get the validation keys
    val_benign_files = os.listdir(path_to_validation_benign_files)
    val_malicious_files = os.listdir(path_to_validation_malicious_files)

    # Create the model
    # Grab the validation data and extract the features
    validation_data = next(my_generator(
        benign_files=val_benign_files,
        malicious_files=val_malicious_files,
        path_to_benign_files=path_to_validation_benign_files,
        path_to_malicious_files=path_to_validation_malicious_files,
        batch_size=n_validation_files,
        features_length=features_length
    ))
    return validation_data


if __name__ == '__main__':
    features_length = 1024
    # By convention, num_obs_per_epoch should be roughly equal to the size
    # of the training dataset
    num_obs_per_epoch = 5000
    batch_size = 128

    # Create the model using the function from the model architecture section
    model = my_model(input_length=features_length)

    # Make the training data generator
    training_generator = make_training_data_generator(
        batch_size=batch_size,
        features_length=features_length
    )
    # Train the model
    model.fit(
        training_generator,
        steps_per_epoch=num_obs_per_epoch / batch_size,
        epochs=15,
        verbose=1)

    # Get some validation data
    validation_data = get_validation_data(features_length=features_length,
                                          n_validation_files=1000)
    # Train the model with training and validation data specified
    model.fit(
        training_generator,
        validation_data=validation_data,
        steps_per_epoch=num_obs_per_epoch / batch_size,
        epochs=15,
        verbose=1)

    # Save the model
    model.save('my_model.h5')
    # Load the model back into memory from the file (keras)
    same_model = load_model('my_model.h5')
